{"version":3,"sources":["images/Julius.jpg","components/Navbar.js","components/ItemDisplay.js","Contexts/Projects.js","pages/CardGenerator.js","theme.js","pages/Aboutme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","makeStyles","list","width","fullList","useStyles","theme","root","maxWidth","display","flexDirection","justifyContent","height","media","objectFit","backdrop","zIndex","drawer","color","ItemDisplay","project","classes","useState","open","setOpen","Card","className","onClick","CardActionArea","CardMedia","image","video","src","component","title","alt","CardContent","Typography","gutterBottom","category","variant","pos","skills","programming","join","technique","description","CardActions","links","report","Button","size","window","code","Backdrop","ProjectsContex","createContext","ProjectsContextProvider","children","items","projects","setProjects","console","log","Provider","value","CardGenerator","useContext","id","Grid","container","spacing","justify","records","map","item","key","createMuiTheme","palette","type","large","Aboutme","direction","alignItems","xs","Avatar","Julius","App","ThemeProvider","CssBaseline","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f619692f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Julius.158efc03.jpg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AppBar from '@material-ui/core/AppBar';\r\n\r\nimport { List, ListItem, ListItemIcon, ListItemText, SwipeableDrawer } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        width: 250,\r\n    },\r\n    fullList: {\r\n        width: 'auto',\r\n    },\r\n});\r\nexport const Navbar = () => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const toggleDrawer = (isOpen) => (event) => {\r\n        if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n\r\n        setOpen(isOpen);\r\n    };\r\n    const handleClick = () => {};\r\n    const getMenuOptionIcon = (icon) => {\r\n        switch (icon) {\r\n            case 'ChevronLeftIcon':\r\n                return <ChevronLeftIcon />;\r\n            case 'option1':\r\n                return <MailIcon />;\r\n            case 'option2':\r\n                return <MailIcon />;\r\n            case 'option3':\r\n                return <InboxIcon />;\r\n            default:\r\n                return <InboxIcon />;\r\n        }\r\n    };\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={toggleDrawer(true)}\r\n                        // edge=\"start\"\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">Some nice text</Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Toolbar />\r\n            <SwipeableDrawer\r\n                classes={{\r\n                    // root: classes.drawerRoot,\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n                open={open}\r\n                onClose={toggleDrawer(false)}\r\n                onOpen={toggleDrawer(true)}\r\n            >\r\n                <List>\r\n                    {['option1', 'option2', 'option3'].map((alternativ) => (\r\n                        <ListItem button key={alternativ} onClick={handleClick}>\r\n                            <ListItemIcon>{getMenuOptionIcon(alternativ)}</ListItemIcon>\r\n                            <ListItemText primary={alternativ} />\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </SwipeableDrawer>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        maxWidth: 345,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        height: '100%',\r\n    },\r\n    media: {\r\n        height: 240,\r\n        objectFit: \"scale-down\"\r\n    },\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nexport const ItemDisplay = ({ project }) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const handleToggle = () => {\r\n        setOpen(!open);\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.root} onClick={handleToggle}>\r\n            <CardActionArea>\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image={project.video.src}\r\n                    component=\"img\"\r\n                    title={project.video.alt}\r\n                />\r\n\r\n                <CardContent>\r\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                        {project.category}\r\n                    </Typography>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {project.title}\r\n                    </Typography>\r\n                    <Typography className={classes.pos} color=\"textSecondary\">\r\n                        {project.skills.programming.join(',')},{project.skills.technique.join(',')}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {project.description}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                {project.links.report !== '' && (\r\n                    <Button\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        onClick={() => window.open(project.links.report, '_blank')}\r\n                    >\r\n                        Project report\r\n                    </Button>\r\n                )}\r\n                {project.links.code !== '' && (\r\n                    <Button\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        onClick={() => window.open(project.links.code, '_blank')}\r\n                    >\r\n                        Source\r\n                    </Button>\r\n                )}\r\n            </CardActions>\r\n            <Backdrop className={classes.backdrop} open={open} onClick={handleClose}>\r\n                <img src={project.video.src} alt={project.video.alt} />\r\n            </Backdrop>\r\n        </Card>\r\n    );\r\n};\r\n\r\nItemDisplay.propTypes = {\r\n    project: PropTypes.shape({\r\n        video: PropTypes.shape({ src: PropTypes.string, alt: PropTypes.string }),\r\n        category: PropTypes.string,\r\n        title: PropTypes.string,\r\n        skills: PropTypes.shape({\r\n            programming: PropTypes.arrayOf(PropTypes.string),\r\n            technique: PropTypes.arrayOf(PropTypes.string),\r\n        }),\r\n        description: PropTypes.string,\r\n        links: PropTypes.shape({ report: PropTypes.string, code: PropTypes.string }),\r\n    }),\r\n};\r\n","import React, { createContext, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport items from '../items.json';\r\n\r\nexport const ProjectsContex = createContext();\r\n\r\nexport const ProjectsContextProvider = ({ children }) => {\r\n    const [projects, setProjects] = useState(items);\r\n    console.log(projects);\r\n    return (\r\n        <ProjectsContex.Provider value={[projects, setProjects]}>\r\n            {children}\r\n        </ProjectsContex.Provider>\r\n    );\r\n};\r\n\r\nProjectsContextProvider.propTypes = {\r\n    children: PropTypes.node,\r\n};\r\n","import React, { useContext } from 'react';\r\n\r\nimport { Grid } from '@material-ui/core';\r\nimport { ItemDisplay } from '../components/ItemDisplay';\r\nimport { ProjectsContex } from '../Contexts/Projects';\r\n\r\nexport const CardGenerator = () => {\r\n    const [projects] = useContext(ProjectsContex);\r\n\r\n    const createProjects = () => {\r\n        return projects.records.map((item) => {\r\n            return (\r\n                <Grid item key={item.title}>\r\n                    <ItemDisplay project={item} key={item.title} />\r\n                </Grid>\r\n            );\r\n        });\r\n    };\r\n    return (\r\n        <div id=\"ItemDisplay\">\r\n            <Grid container spacing={3} justify=\"center\">\r\n                {createProjects()}\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n});\r\n","import React from 'react';\r\n\r\nimport { Avatar, Grid, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Julius from '../images/Julius.jpg';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    large: {\r\n        width: '15vh',\r\n        height: '15vh',\r\n    },\r\n}));\r\n\r\nexport const Aboutme = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n            <Grid item xs={11}>\r\n                <Avatar src={Julius} className={classes.large} />\r\n            </Grid>\r\n            <Grid item xs={11}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    Im a young lad that just finished my Master of Science in Media Technology and\r\n                    Engineering at Linköping university. In my master i focused on\r\n                    visualization,image processing, AI/ML and project courses for more hand on\r\n                    programming experience\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Navbar } from './components/Navbar';\r\nimport { Container, CssBaseline, Grid, ThemeProvider } from '@material-ui/core';\r\nimport { CardGenerator } from './pages/CardGenerator';\r\nimport { ProjectsContextProvider } from './Contexts/Projects';\r\nimport { theme } from './theme';\r\nimport { Aboutme } from './pages/Aboutme';\r\nfunction App() {\r\n    return (\r\n        <>\r\n            <ThemeProvider theme={theme}>\r\n                <CssBaseline />\r\n                <ProjectsContextProvider>\r\n                    <Grid\r\n                        container\r\n                        spacing={3}\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        {/* <Navbar /> */}\r\n                        <Grid item xs={11}>\r\n                            <Aboutme />\r\n                        </Grid>\r\n                        <Grid item xs={11}>\r\n                            <CardGenerator />\r\n                        </Grid>\r\n                    </Grid>\r\n                </ProjectsContextProvider>\r\n            </ThemeProvider>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}