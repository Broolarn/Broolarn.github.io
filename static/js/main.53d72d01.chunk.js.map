{"version":3,"sources":["images/Julius.jpg","components/Navbar.js","components/ItemDisplay.js","Contexts/Projects.js","pages/CardGenerator.js","theme.js","pages/Aboutme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","makeStyles","list","width","fullList","useStyles","theme","root","maxWidth","display","flexDirection","justifyContent","height","media","backdrop","zIndex","drawer","color","ItemDisplay","project","classes","useState","open","setOpen","Card","className","onClick","CardActionArea","CardMedia","image","video","src","component","title","alt","CardContent","Typography","gutterBottom","category","variant","pos","skills","programming","join","technique","description","CardActions","links","report","Button","size","window","code","Backdrop","ProjectsContex","createContext","ProjectsContextProvider","children","items","projects","setProjects","console","log","Provider","value","CardGenerator","useContext","id","Grid","container","spacing","justify","records","map","item","key","createMuiTheme","palette","type","large","Aboutme","direction","alignItems","xs","Avatar","Julius","App","ThemeProvider","CssBaseline","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.53d72d01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Julius.158efc03.jpg\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport AppBar from '@material-ui/core/AppBar';\n\nimport { List, ListItem, ListItemIcon, ListItemText, SwipeableDrawer } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    list: {\n        width: 250,\n    },\n    fullList: {\n        width: 'auto',\n    },\n});\nexport const Navbar = () => {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const toggleDrawer = (isOpen) => (event) => {\n        if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n            return;\n        }\n\n        setOpen(isOpen);\n    };\n    const handleClick = () => {};\n    const getMenuOptionIcon = (icon) => {\n        switch (icon) {\n            case 'ChevronLeftIcon':\n                return <ChevronLeftIcon />;\n            case 'option1':\n                return <MailIcon />;\n            case 'option2':\n                return <MailIcon />;\n            case 'option3':\n                return <InboxIcon />;\n            default:\n                return <InboxIcon />;\n        }\n    };\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={toggleDrawer(true)}\n                        // edge=\"start\"\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\">Some nice text</Typography>\n                </Toolbar>\n            </AppBar>\n            <Toolbar />\n            <SwipeableDrawer\n                classes={{\n                    // root: classes.drawerRoot,\n                    paper: classes.drawerPaper,\n                }}\n                open={open}\n                onClose={toggleDrawer(false)}\n                onOpen={toggleDrawer(true)}\n            >\n                <List>\n                    {['option1', 'option2', 'option3'].map((alternativ) => (\n                        <ListItem button key={alternativ} onClick={handleClick}>\n                            <ListItemIcon>{getMenuOptionIcon(alternativ)}</ListItemIcon>\n                            <ListItemText primary={alternativ} />\n                        </ListItem>\n                    ))}\n                </List>\n            </SwipeableDrawer>\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: 345,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        height: '100%',\n    },\n    media: {\n        height: 240,\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nexport const ItemDisplay = ({ project }) => {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const handleClose = () => {\n        setOpen(false);\n    };\n    const handleToggle = () => {\n        setOpen(!open);\n    };\n\n    return (\n        <Card className={classes.root} onClick={handleToggle}>\n            <CardActionArea>\n                <CardMedia\n                    className={classes.media}\n                    image={project.video.src}\n                    component=\"img\"\n                    title={project.video.alt}\n                />\n\n                <CardContent>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        {project.category}\n                    </Typography>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {project.title}\n                    </Typography>\n                    <Typography className={classes.pos} color=\"textSecondary\">\n                        {project.skills.programming.join(',')},{project.skills.technique.join(',')}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        {project.description}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n            <CardActions>\n                {project.links.report !== '' && (\n                    <Button\n                        size=\"small\"\n                        color=\"primary\"\n                        onClick={() => window.open(project.links.report, '_blank')}\n                    >\n                        Project report\n                    </Button>\n                )}\n                {project.links.code !== '' && (\n                    <Button\n                        size=\"small\"\n                        color=\"primary\"\n                        onClick={() => window.open(project.links.code, '_blank')}\n                    >\n                        Source\n                    </Button>\n                )}\n            </CardActions>\n            <Backdrop className={classes.backdrop} open={open} onClick={handleClose}>\n                <img src={project.video.src} alt={project.video.alt} />\n            </Backdrop>\n        </Card>\n    );\n};\n\nItemDisplay.propTypes = {\n    project: PropTypes.shape({\n        video: PropTypes.shape({ src: PropTypes.string, alt: PropTypes.string }),\n        category: PropTypes.string,\n        title: PropTypes.string,\n        skills: PropTypes.shape({\n            programming: PropTypes.arrayOf(PropTypes.string),\n            technique: PropTypes.arrayOf(PropTypes.string),\n        }),\n        description: PropTypes.string,\n        links: PropTypes.shape({ report: PropTypes.string, code: PropTypes.string }),\n    }),\n};\n","import React, { createContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport items from '../items.json';\n\nexport const ProjectsContex = createContext();\n\nexport const ProjectsContextProvider = ({ children }) => {\n    const [projects, setProjects] = useState(items);\n    console.log(projects);\n    return (\n        <ProjectsContex.Provider value={[projects, setProjects]}>\n            {children}\n        </ProjectsContex.Provider>\n    );\n};\n\nProjectsContextProvider.propTypes = {\n    children: PropTypes.node,\n};\n","import React, { useContext } from 'react';\n\nimport { Grid } from '@material-ui/core';\nimport { ItemDisplay } from '../components/ItemDisplay';\nimport { ProjectsContex } from '../Contexts/Projects';\n\nexport const CardGenerator = () => {\n    const [projects] = useContext(ProjectsContex);\n\n    const createProjects = () => {\n        return projects.records.map((item) => {\n            return (\n                <Grid item key={item.title}>\n                    <ItemDisplay project={item} key={item.title} />\n                </Grid>\n            );\n        });\n    };\n    return (\n        <div id=\"ItemDisplay\">\n            <Grid container spacing={3} justify=\"center\">\n                {createProjects()}\n            </Grid>\n        </div>\n    );\n};\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n});\r\n","import React from 'react';\n\nimport { Avatar, Grid, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Julius from '../images/Julius.jpg';\n\nconst useStyles = makeStyles(() => ({\n    large: {\n        width: '15vh',\n        height: '15vh',\n    },\n}));\n\nexport const Aboutme = () => {\n    const classes = useStyles();\n    return (\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n            <Grid item xs={11}>\n                <Avatar src={Julius} className={classes.large} />\n            </Grid>\n            <Grid item xs={11}>\n                <Typography variant=\"h6\" gutterBottom>\n                    Im a young lad that just finished my Master of Science in Media Technology and\n                    Engineering at Linköping university. In my master i focused on\n                    visualization,image processing, AI/ML and project courses for more hand on\n                    programming experience\n                </Typography>\n            </Grid>\n        </Grid>\n    );\n};\n","import React from 'react';\nimport { Navbar } from './components/Navbar';\nimport { Container, CssBaseline, Grid, ThemeProvider } from '@material-ui/core';\nimport { CardGenerator } from './pages/CardGenerator';\nimport { ProjectsContextProvider } from './Contexts/Projects';\nimport { theme } from './theme';\nimport { Aboutme } from './pages/Aboutme';\nfunction App() {\n    return (\n        <>\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <ProjectsContextProvider>\n                    <Grid\n                        container\n                        spacing={3}\n                        direction=\"column\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                    >\n                        {/* <Navbar /> */}\n                        <Grid item xs={11}>\n                            <Aboutme />\n                        </Grid>\n                        <Grid item xs={11}>\n                            <CardGenerator />\n                        </Grid>\n                    </Grid>\n                </ProjectsContextProvider>\n            </ThemeProvider>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}